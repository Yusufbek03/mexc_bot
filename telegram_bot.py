import logging
import asyncio
from datetime import datetime
from telegram import Bot, Update
from telegram.ext import Application, CommandHandler, ContextTypes
from config import TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID, MIN_SPREAD_PERCENT
from mexc_api import MEXCAPI

logger = logging.getLogger(__name__)

class SpreadBot:
    def __init__(self):
        self.bot = Bot(token=TELEGRAM_BOT_TOKEN)
        self.application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
        self.mexc_api = MEXCAPI()
        self.last_spreads = set()  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–ø—Ä–µ–¥–æ–≤
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("check", self.check_spreads_command))
        self.application.add_handler(CommandHandler("status", self.status_command))
        self.application.add_handler(CommandHandler("price", self.price_command))
        
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_message = """
ü§ñ **DETECT Manipulations Bot**

–ë–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π —Ü–µ–Ω –º–µ–∂–¥—É —Å–ø–æ—Ç–æ–º –∏ —Ñ—å—é—á–µ—Ä—Å–∞–º–∏ –Ω–∞ –±–∏—Ä–∂–µ MEXC.

**–ö–æ–º–∞–Ω–¥—ã:**
/check - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–µ —Å–ø—Ä–µ–¥—ã
/status - –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞
/start - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

**–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:**
–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –æ —Å–ø—Ä–µ–¥–∞—Ö –æ—Ç 5% –∏ –≤—ã—à–µ –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã.
        """
        await update.message.reply_text(welcome_message, parse_mode='Markdown')
    
    async def check_spreads_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /check - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –ø–∞—Ä—ã —Å —Ü–µ–Ω–∞–º–∏ –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
        await update.message.reply_text("üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å–ø—Ä–µ–¥—ã –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä...")
        
        try:
            async with self.mexc_api as api:
                # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã –∏–∑ —Å—Ç–∞–∫–∞–Ω–∞ –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä
                spot_prices, futures_prices = await api.get_all_prices_from_orderbook()
                
                if spot_prices and futures_prices:
                    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–ø—Ä–µ–¥–æ–≤
                    all_spreads = []
                    
                    for symbol in spot_prices.keys():
                        if symbol in futures_prices:
                            spot_price = spot_prices[symbol]
                            futures_price = futures_prices[symbol]
                            
                            if spot_price > 0 and futures_price > 0:
                                spread = abs(spot_price - futures_price) / spot_price * 100
                                
                                all_spreads.append({
                                    'symbol': symbol.replace('_USDT', ''),
                                    'spot_price': spot_price,
                                    'futures_price': futures_price,
                                    'spread': spread,
                                    'spot_symbol': symbol,
                                    'futures_symbol': symbol
                                })
                    
                    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å–ø—Ä–µ–¥—É (–æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É)
                    all_spreads.sort(key=lambda x: x['spread'], reverse=True)
                    
                    if all_spreads:
                        message = f"üìä **–í—Å–µ –ø–∞—Ä—ã —Å —Ü–µ–Ω–∞–º–∏ –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ ({len(all_spreads)} –ø–∞—Ä):**\n\n"
                        
                        for spread in all_spreads:
                            symbol = spread['symbol']
                            spot_price = spread['spot_price']
                            futures_price = spread['futures_price']
                            spread_percent = spread['spread']
                            
                            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø—Ä–µ–¥–∞
                            if spot_price > futures_price:
                                direction = "üìà LONG"
                                spread_type = "–°–ø–æ—Ç > –§—å—é—á–µ—Ä—Å"
                            else:
                                direction = "üìâ SHORT"
                                spread_type = "–§—å—é—á–µ—Ä—Å > –°–ø–æ—Ç"
                            
                            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –ø–∞—Ä—É
                            message += f"**{symbol}** {direction}/USDT\n"
                            message += f"üí∞ –°–ø—Ä–µ–¥: **{spread_percent:.2f}%** ({spread_type})\n"
                            message += f"üìä –°–ø–æ—Ç: {spot_price:.8f}\n"
                            message += f"üìà –§—å—é—á–µ—Ä—Å: {futures_price:.8f}\n\n"
                        
                        message += f"‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}"
                        
                        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
                        if len(message) > 4000:
                            parts = [message[i:i+4000] for i in range(0, len(message), 4000)]
                            for i, part in enumerate(parts):
                                if i == 0:
                                    await update.message.reply_text(part, parse_mode='Markdown')
                                else:
                                    await update.message.reply_text(f"–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ...\n\n{part}", parse_mode='Markdown')
                        else:
                            await update.message.reply_text(message, parse_mode='Markdown')
                    else:
                        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å–ø—Ä–µ–¥–∞—Ö")
                else:
                    await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—ã –∏–∑ —Å—Ç–∞–∫–∞–Ω–∞")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–ø—Ä–µ–¥–æ–≤: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–ø—Ä–µ–¥–æ–≤: {e}")
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
        status_message = f"""
üìä **–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞**

‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω
‚è∞ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.now().strftime('%H:%M:%S')}
üéØ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥: {MIN_SPREAD_PERCENT}%
üîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã
        """
        await update.message.reply_text(status_message, parse_mode='Markdown')
    
    def format_spreads_message(self, spreads: list) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å–ø—Ä–µ–¥–∞–º–∏ –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
        message = ""
        
        for spread in spreads:
            symbol = spread['symbol']
            spot_price = spread['spot_price']
            futures_price = spread['futures_price']
            spread_percent = spread['spread']
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø—Ä–µ–¥–∞
            if spot_price > futures_price:
                direction = "üìà LONG"
                spread_type = "–°–ø–æ—Ç > –§—å—é—á–µ—Ä—Å"
            else:
                direction = "üìâ SHORT"
                spread_type = "–§—å—é—á–µ—Ä—Å > –°–ø–æ—Ç"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –Ω—É–∂–Ω–æ–º —Å—Ç–∏–ª–µ
            message += f"**{symbol}** {direction}/USDT\n"
            message += f"üí∞ –°–ø—Ä–µ–¥: **{spread_percent}%** ({spread_type})\n"
            message += f"üìä –°–ø–æ—Ç: {spot_price:.8f}\n"
            message += f"üìà –§—å—é—á–µ—Ä—Å: {futures_price:.8f}\n"
            message += f"üîó [–°–ø–æ—Ç](https://www.mexc.com/exchange/{symbol}_USDT)\n"
            message += f"üîó [–§—å—é—á–µ—Ä—Å](https://futures.mexc.com/exchange/{symbol}_USDT)\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        message += f"‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}"
        return message
    
    async def send_spread_alert(self, spreads: list):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Å–ø—Ä–µ–¥–∞—Ö"""
        if not spreads:
            return
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Å–ø—Ä–µ–¥—ã
        new_spreads = []
        current_spreads = set()
        
        for spread in spreads:
            spread_key = f"{spread['symbol']}_{spread['spread']}"
            current_spreads.add(spread_key)
            
            if spread_key not in self.last_spreads:
                new_spreads.append(spread)
        
        if new_spreads:
            message = self.format_spreads_message(new_spreads)
            try:
                await self.bot.send_message(
                    chat_id=TELEGRAM_CHAT_ID,
                    text=message,
                    parse_mode='Markdown',
                    disable_web_page_preview=True
                )
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ {len(new_spreads)} –Ω–æ–≤—ã—Ö —Å–ø—Ä–µ–¥–∞—Ö")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–ø—Ä–µ–¥–æ–≤
        self.last_spreads = current_spreads
    
    async def price_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /price - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ü–µ–Ω—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞—Ä—ã"""
        if not context.args:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ —Å–∏–º–≤–æ–ª –ø–∞—Ä—ã. –ü—Ä–∏–º–µ—Ä: /price BTC –∏–ª–∏ /price UNI")
            return
        
        symbol = context.args[0].upper()
        if not symbol.endswith('_USDT'):
            symbol = f"{symbol}_USDT"
        
        await update.message.reply_text(f"üîç –ü–æ–ª—É—á–∞—é —Ü–µ–Ω—ã –¥–ª—è {symbol}...")
        
        try:
            async with self.mexc_api as api:
                spot_price, futures_price = await api.get_symbol_price_from_orderbook(symbol)
                
                if spot_price > 0 and futures_price > 0:
                    spread = abs(spot_price - futures_price) / spot_price * 100
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø—Ä–µ–¥–∞
                    if spot_price > futures_price:
                        direction = "üìà LONG"
                        spread_type = "–°–ø–æ—Ç > –§—å—é—á–µ—Ä—Å"
                    else:
                        direction = "üìâ SHORT"
                        spread_type = "–§—å—é—á–µ—Ä—Å > –°–ø–æ—Ç"
                    
                    message = f"**{symbol.replace('_USDT', '')}** {direction}/USDT\n"
                    message += f"üí∞ –°–ø—Ä–µ–¥: **{spread:.2f}%** ({spread_type})\n"
                    message += f"üìä –°–ø–æ—Ç: {spot_price:.8f}\n"
                    message += f"üìà –§—å—é—á–µ—Ä—Å: {futures_price:.8f}\n"
                    message += f"üîó [–°–ø–æ—Ç](https://www.mexc.com/exchange/{symbol})\n"
                    message += f"üîó [–§—å—é—á–µ—Ä—Å](https://futures.mexc.com/exchange/{symbol})\n"
                    message += f"‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}"
                    
                    await update.message.reply_text(message, parse_mode='Markdown')
                else:
                    await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—ã –¥–ª—è {symbol}")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã –¥–ª—è {symbol}: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã: {e}")
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        await self.application.initialize()
        await self.application.start()
        await self.application.updater.start_polling()
        
        try:
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±–æ—Ç–∞
            while True:
                await asyncio.sleep(1)
        except KeyboardInterrupt:
            logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
        finally:
            await self.application.updater.stop()
            await self.application.stop()
            await self.application.shutdown()
