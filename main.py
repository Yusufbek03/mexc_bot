import asyncio
import logging
import signal
import sys
from datetime import datetime
from config import LOG_LEVEL, LOG_FORMAT, UPDATE_INTERVAL, MIN_SPREAD_PERCENT
from mexc_api import MEXCAPI
from telegram_bot import SpreadBot

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=getattr(logging, LOG_LEVEL),
    format=LOG_FORMAT,
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('spread_bot.log')
    ]
)
logger = logging.getLogger(__name__)

class SpreadMonitor:
    def __init__(self):
        self.bot = SpreadBot()
        self.mexc_api = MEXCAPI()
        self.running = True
        self.last_check = None
        self.realtime_task = None
        self.last_notification_time = {}  # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        signal.signal(signal.SIGINT, self.signal_handler)
        signal.signal(signal.SIGTERM, self.signal_handler)
    
    def signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        self.running = False
    
    async def price_update_handler(self, symbol: str, data, data_type: str):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ü–µ–Ω –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        try:
            if data_type == 'price_update':
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏–∑ —Å—Ç–∞–∫–∞–Ω–∞
                spot_price = data.get('spot', {}).get('price', 0)
                futures_price = data.get('futures', {}).get('price', 0)
                
                if spot_price > 0 and futures_price > 0:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã –≤ API
                    self.mexc_api.spot_prices[symbol] = spot_price
                    self.mexc_api.futures_prices[symbol] = futures_price
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ø—Ä–µ–¥
                    spread = abs(spot_price - futures_price) / spot_price * 100
                    
                    if spread >= MIN_SPREAD_PERCENT:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
                        current_time = datetime.now()
                        last_notification = self.last_notification_time.get(symbol)
                        
                        if last_notification is None or (current_time - last_notification).total_seconds() >= UPDATE_INTERVAL:
                            logger.info(f"üö® –í–´–°–û–ö–ò–ô –°–ü–†–ï–î –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏!")
                            logger.info(f"   {symbol}: {spread:.2f}%")
                            logger.info(f"   –°–ø–æ—Ç: ${spot_price:.8f}")
                            logger.info(f"   –§—å—é—á–µ—Ä—Å: ${futures_price:.8f}")
                            
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                            spread_info = [{
                                'symbol': symbol.replace('_USDT', ''),
                                'spot_price': spot_price,
                                'futures_price': futures_price,
                                'spread': spread,
                                'spot_symbol': symbol,
                                'futures_symbol': symbol
                            }]
                            
                            await self.bot.send_spread_alert(spread_info)
                            
                            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
                            self.last_notification_time[symbol] = current_time
                        else:
                            remaining_time = UPDATE_INTERVAL - (current_time - last_notification).total_seconds()
                            logger.debug(f"‚è∞ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è {symbol}, —Å–ª–µ–¥—É—é—â–µ–µ —á–µ—Ä–µ–∑ {remaining_time:.0f} —Å–µ–∫")
                    
                    logger.debug(f"üí∞ {symbol}: –°–ø–æ—Ç ${spot_price:.8f}, –§—å—é—á–µ—Ä—Å ${futures_price:.8f}, –°–ø—Ä–µ–¥ {spread:.2f}%")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Ü–µ–Ω: {e}")
    
    async def check_spreads(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø—Ä–µ–¥–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø—Ä–µ–¥–æ–≤ –∏–∑ —Å—Ç–∞–∫–∞–Ω–∞...")
            
            async with self.mexc_api as api:
                # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã –∏–∑ —Å—Ç–∞–∫–∞–Ω–∞
                spot_prices, futures_prices = await api.get_all_prices_from_orderbook()
                
                if not spot_prices or not futures_prices:
                    logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–∞–∫–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∏–∫–µ—Ä—ã")
                    spot_prices, futures_prices = await api.get_all_tickers()
                
                if not spot_prices or not futures_prices:
                    logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–∞—Ö")
                    return
                
                # –ü–æ–∏—Å–∫ —Å–ø—Ä–µ–¥–æ–≤
                spreads = api.find_spreads(spot_prices, futures_prices, MIN_SPREAD_PERCENT)
                
                if spreads:
                    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(spreads)} –ø–∞—Ä —Å–æ —Å–ø—Ä–µ–¥–æ–º –æ—Ç {MIN_SPREAD_PERCENT}%")
                    
                    # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ø—Ä–µ–¥—ã, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    current_time = datetime.now()
                    filtered_spreads = []
                    
                    for spread in spreads:
                        symbol = spread['spot_symbol']
                        last_notification = self.last_notification_time.get(symbol)
                        
                        if last_notification is None or (current_time - last_notification).total_seconds() >= UPDATE_INTERVAL:
                            filtered_spreads.append(spread)
                        else:
                            remaining_time = UPDATE_INTERVAL - (current_time - last_notification).total_seconds()
                            logger.debug(f"‚è∞ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º {symbol}, —Å–ª–µ–¥—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {remaining_time:.0f} —Å–µ–∫")
                    
                    if filtered_spreads:
                        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
                        await self.bot.send_spread_alert(filtered_spreads)
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
                        for spread in filtered_spreads:
                            symbol = spread['spot_symbol']
                            self.last_notification_time[symbol] = current_time
                        
                        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–ø—Ä–µ–¥–æ–≤
                        for spread in filtered_spreads[:5]:  # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ø-5
                            logger.info(
                                f"–°–ø—Ä–µ–¥: {spread['symbol']} - {spread['spread']}% "
                                f"(–°–ø–æ—Ç: {spread['spot_price']:.8f}, "
                                f"–§—å—é—á–µ—Ä—Å: {spread['futures_price']:.8f})"
                            )
                    else:
                        logger.info("–í—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–ø—Ä–µ–¥—ã –±—ã–ª–∏ –Ω–µ–¥–∞–≤–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã")
                else:
                    logger.info("–°–ø—Ä–µ–¥—ã –æ—Ç 5% –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
                self.last_check = datetime.now()
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–ø—Ä–µ–¥–æ–≤: {e}")
    
    async def start_realtime_monitoring(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏...")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ü–µ–Ω
            self.mexc_api.add_price_callback(self.price_update_handler)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
            self.realtime_task = asyncio.create_task(
                self.mexc_api.start_realtime_updates(
                    symbols=['BTC_USDT', 'ETH_USDT', 'BNB_USDT', 'ADA_USDT', 'SOL_USDT', 'UNI_USDT', 'DOT_USDT', 'LINK_USDT', 'MATIC_USDT', 'AVAX_USDT'],
                    update_interval=600  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
                )
            )
            
            logger.info("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø—É—â–µ–Ω")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏: {e}")
    
    async def run_monitor(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–ø—Ä–µ–¥–æ–≤...")
        logger.info(f"üéØ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥: {MIN_SPREAD_PERCENT}%")
        logger.info(f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {UPDATE_INTERVAL} —Å–µ–∫—É–Ω–¥ ({UPDATE_INTERVAL/60:.1f} –º–∏–Ω—É—Ç)")
        
        # –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
        bot_task = asyncio.create_task(self.bot.run())
        
        # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        await self.start_realtime_monitoring()
        
        try:
            while self.running:
                # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø—Ä–µ–¥–æ–≤ (–∫–∞–∫ fallback)
                await self.check_spreads()
                
                # –û–∂–∏–¥–∞–Ω–∏–µ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                for _ in range(UPDATE_INTERVAL):
                    if not self.running:
                        break
                    await asyncio.sleep(1)
                    
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: {e}")
        finally:
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á
            if self.realtime_task:
                self.realtime_task.cancel()
                try:
                    await self.realtime_task
                except asyncio.CancelledError:
                    pass
            
            bot_task.cancel()
            try:
                await bot_task
            except asyncio.CancelledError:
                pass
            
            logger.info("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω")
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        try:
            await self.run_monitor()
        except KeyboardInterrupt:
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        finally:
            self.running = False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    monitor = SpreadMonitor()
    await monitor.run()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
